generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String           @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  email     String          @unique
  passwordHash  String

  // Relationship with Sources, One-to-Many
  sources   Source[]
}

model SourceType {
  id               String           @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  name             String          @unique
  symbol           String          @unique
  url              String?          @unique 

  // Relationship with Source (One-to-Many)
  sources          Source[]
}

model Source {
  id               String           @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationship with User (Many-to-One)
  userId           String 
  user             User            @relation(fields: [userId], references: [id])

  // Relationship with SourceType (Many-to-one)
  sourceTypeId     String
  sourceType       SourceType      @relation(fields: [sourceTypeId], references: [id])

  // Relationship with Currency (One-to-Many)
  currencies       Currency[]

  // Enforces uniqueness of userId and sourceTypeId
  // This is, a user can only have one source of a given type
  @@unique([userId, sourceTypeId])
}

model CurrencyType {
  id        String @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  symbol    String    @unique 
  name      String    @unique 
  price Float    @default(0.0)
  
  // Relationship with Currency (One-to-Many)
  currencies       Currency[]
}


model Currency {
  id        String @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  amount             Float

  // Relationship with CurrencyType (Many-to-One)
  currencyTypeId     String
  currencyType       CurrencyType    @relation(fields: [currencyTypeId], references: [id])

  // Relationship with Source (Many-to-One)
  sourceId           String
  source             Source          @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  // Enforces uniqueness of sourceId and currencyTypeId
  // This is, a source can only have one currency of a given type
  @@unique([sourceId, currencyTypeId])
}
